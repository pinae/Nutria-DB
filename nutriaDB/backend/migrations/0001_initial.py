# Generated by Django 2.1.3 on 2018-12-07 23:39

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(help_text='Amount of this food in g.')),
            ],
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_addition', models.CharField(max_length=256)),
                ('creation_date', models.DateTimeField(auto_now=True)),
                ('ean', models.BinaryField(max_length=13, null=True)),
                ('reference_amount', models.FloatField(default=100, help_text='Reference amount for this food in g. This is usually 100g.')),
                ('calories', models.FloatField(help_text='Number of kcal of the reference amount of this food. This must not be empty.')),
                ('total_fat', models.FloatField(help_text='Total amount of fat in g in the reference amount.', null=True)),
                ('saturated_fat', models.FloatField(help_text='Amount of saturated fat in g in the reference amount.', null=True)),
                ('cholesterol', models.FloatField(help_text='Amount of choleserol in mg in the reference amount.', null=True)),
                ('protein', models.FloatField(help_text='Amount of protein in g in the reference amount.', null=True)),
                ('total_carbs', models.FloatField(help_text='Total amount of carbs in g in the reference amount.', null=True)),
                ('sugar', models.FloatField(help_text='Amount of sugar in g in the reference amount.', null=True)),
                ('dietary_fiber', models.FloatField(help_text='Amount of dietary fiber in g in the reference amount.', null=True)),
                ('salt', models.FloatField(help_text='Amount of salt in g in the reference amount.', null=True)),
                ('sodium', models.FloatField(help_text='Amount of sodium in mg in the reference amount.', null=True)),
                ('potassium', models.FloatField(help_text='Amount of potassium in mg in the reference amount.', null=True)),
                ('copper', models.FloatField(help_text='Amount of copper in mg in the reference amount.', null=True)),
                ('iron', models.FloatField(help_text='Amount of iron in mg in the reference amount.', null=True)),
                ('magnesium', models.FloatField(help_text='Amount of magnesium in mg in the reference amount.', null=True)),
                ('manganese', models.FloatField(help_text='Amount of manganese in mg in the reference amount.', null=True)),
                ('zinc', models.FloatField(help_text='Amount of zinc in mg in the reference amount.', null=True)),
                ('phosphorous', models.FloatField(help_text='Amount of phosphorous in mg in the reference amount.', null=True)),
                ('sulphur', models.FloatField(help_text='Amount of sulphur in mg in the reference amount.', null=True)),
                ('chloro', models.FloatField(help_text='Amount of chloro in mg in the reference amount.', null=True)),
                ('fluoric', models.FloatField(help_text='Amount of fluoric in mg in the reference amount.', null=True)),
                ('vitamin_b1', models.FloatField(help_text='Amount of Vitamin B1 in mg in the reference amount.', null=True)),
                ('vitamin_b12', models.FloatField(help_text='Amount of Vitamin B12 in mg in the reference amount.', null=True)),
                ('vitamin_b6', models.FloatField(help_text='Amount of Vitamin B6 in mg in the reference amount.', null=True)),
                ('vitamin_c', models.FloatField(help_text='Amount of Vitamin C in mg in the reference amount.', null=True)),
                ('vitamin_d', models.FloatField(help_text='Amount of Vitamin D in mg in the reference amount.', null=True)),
                ('vitamin_e', models.FloatField(help_text='Amount of Vitamin E in mg in the reference amount.', null=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Category')),
                ('manufacturer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.Manufacturer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_addition', models.CharField(max_length=256)),
                ('creation_date', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Category')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='ingredient',
            name='food_is_recipe',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.Recipe'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='product',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.Product'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='recipe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to='backend.Recipe'),
        ),
    ]
